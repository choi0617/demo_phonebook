{"version":3,"sources":["components/Persons.js","components/Search.js","components/PersonForm.js","components/Notification.js","services/personServices.js","App.js","index.js"],"names":["Persons","props","name","number","deletePerson","id","onClick","Search","handleSearchChange","searchResults","onChange","map","person","PersonForm","addPerson","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","value","type","Notification","message","style","color","fontStyle","fontSize","background","border","borderRadius","padding","marginBottom","baseUrl","personServices","getAll","axios","get","then","res","data","create","newObj","post","update","put","deleteContact","delete","App","useState","persons","setPersons","setNewName","setNewNumber","setSearchResults","notification","setNotification","useEffect","toDelete","find","window","confirm","filter","catch","err","console","log","e","inputValue","target","filteredPersons","toLowerCase","includes","preventDefault","returnedPersonObj","setTimeout","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a727b5be.chunk.js","sourcesContent":["import React from 'react';\n\nconst Persons = (props) => {\n    const {name, number, deletePerson, id} = props;\n    return (\n        <p>\n            {name} {number} <button onClick={() => deletePerson(id)}>Delete</button>\n        </p>\n    )\n}\n\nexport default Persons;","import React from \"react\";\n\nconst Search = (props) => {\n  const {handleSearchChange, searchResults} = props;\n  return (\n    <div>\n      Search: <input onChange={handleSearchChange} />\n      {searchResults.map(person => {\n        return (\n          <p key={person.name}>{person.name} {person.number}</p>\n        )\n      })}\n    </div>\n  );\n};\n\nexport default Search;\n","import React from \"react\";\n\nconst PersonForm = (props) => {\n    const {addPerson, newName, handleNameChange, newNumber, handleNumberChange} = props;\n  return (\n    <form onSubmit={addPerson}>\n      <div>\n        <h2>Add a new person</h2>\n        name: <input value={newName} onChange={handleNameChange} />\n      </div>\n      <div>\n        number: <input value={newNumber} onChange={handleNumberChange} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  );\n};\n\nexport default PersonForm;\n","import React from \"react\";\n\nconst Notification = ({ message }) => {\n  const notificationStyle = {\n    color: \"green\",\n    fontStyle: \"italic\",\n    fontSize: 16,\n    background: 'lightgrey',\n    border: 'solid',\n    borderRadius: 5,\n    padding: 10,\n    marginBottom: 10\n  };\n  return <>{message && <div style={notificationStyle}>{message}</div>}</>;\n};\n\nexport default Notification;\n","import axios from 'axios'\nconst baseUrl = '/api/persons';\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(res => res.data)\n}\n\nconst create = (newObj) => {\n    const request = axios.post(baseUrl, newObj)\n    return request.then(res => res.data)\n}\n\nconst update = (id, newObj) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObj)\n    return request.then(res => res.data)\n}\n\nconst deleteContact = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(res => res.data)\n}\n\nconst personServices = { getAll, create, update, deleteContact}\n\nexport default personServices","import React, { useEffect, useState } from \"react\";\nimport Persons from \"./components/Persons\";\nimport Search from \"./components/Search\";\nimport PersonForm from \"./components/PersonForm\";\nimport Notification from \"./components/Notification\";\n\nimport personServices from \"./services/personServices\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [notification, setNotification] = useState(\"\");\n\n  useEffect(() => {\n    personServices.getAll().then((persons) => {\n      setPersons(persons);\n    });\n  }, []);\n\n  const handleNameChange = (e) => {\n    setNewName(e.target.value);\n  };\n\n  const handleNumberChange = (e) => {\n    setNewNumber(e.target.value);\n  };\n\n  const handleSearchChange = (e) => {\n    // don't use controlled components for search inputs\n    // does not register the first character input because setState is async\n    let inputValue = e.target.value;\n\n    const filteredPersons = persons.filter((person) => {\n      return person.name.toLowerCase().includes(inputValue.toLowerCase());\n    });\n    setSearchResults(filteredPersons);\n  };\n\n  const checkDuplicateNames = (newName) => {\n    return persons.filter((person) => person.name === newName);\n  };\n\n  const updatePerson = (name, number) => {\n    const personToUpdate = persons.find((person) => person.name === name);\n    const ok = window.confirm(\n      `${name} already exists. Do you want to update phone number?`\n    );\n    if (ok) {\n      personServices\n        .update(personToUpdate.id, {\n          name: name,\n          number: number,\n        })\n        .then((returnedObj) => {\n          // setPersons(\n          //   persons.map((person) =>\n          //     person.id !== personToUpdate.id ? person : returnedObj\n          //   )\n          // );\n          console.log(returnedObj);\n          // check out code above to see why update isn't working\n          setNewName(\"\");\n          setNewNumber(\"\");\n        })\n        .catch((err) => {\n          console.log(\"failed\", err);\n          setNotification(\n            `${personToUpdate.name} has already been removed from the server`\n          );\n          setPersons(\n            persons.filter((person) => person.id !== personToUpdate.id)\n          );\n        });\n    }\n  };\n\n  const addPerson = (e) => {\n    e.preventDefault();\n\n    // check for duplicate names\n    // if (checkDuplicateNames(newName).length > 0) {\n    // updatePerson(newName, newNumber);\n    //return alert(`${newName} is already added to the phonebook`);\n    // } else {\n    // axios.POST requires two parameters. First, it needs the URI of the service endpoint.\n    // Second, an object which contains the properties that we want to send to our\n    // server should be passed to it.\n\n    personServices\n      .create({ name: newName, number: newNumber })\n      .then((returnedPersonObj) => {\n        // returnedPersonObj is the personObj returned.\n        setPersons(returnedPersonObj);\n        setNewName(\"\");\n        setNewNumber(\"\");\n        setNotification(`${newName} has been created!`);\n        setTimeout(() => {\n          setNotification(null);\n        }, 5000);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n    // }\n  };\n\n  const deletePerson = (id) => {\n    const toDelete = persons.find((person) => person.id === id);\n    const confirmDelete = window.confirm(`Delete ${toDelete.name}?`);\n\n    if (confirmDelete) {\n      personServices\n        .deleteContact(id)\n        .then((res) => {\n          setPersons(persons.filter((person) => person.id !== id));\n        })\n        .catch((err) => console.log(err));\n    }\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notification} />\n      <div>\n        <Search\n          handleSearchChange={handleSearchChange}\n          searchResults={searchResults}\n        />\n      </div>\n      <PersonForm\n        addPerson={addPerson}\n        newName={newName}\n        handleNameChange={handleNameChange}\n        newNumber={newNumber}\n        handleNumberChange={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n\n      <div>\n        {persons.map((person) => (\n          <Persons\n            id={person.id}\n            key={person.id}\n            name={person.name}\n            number={person.number}\n            deletePerson={deletePerson}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}